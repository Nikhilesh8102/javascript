                    JAVASCRIPT

Developed by brandan eich
Initially named as Mocha, then licescript and now JAVASCRIPT
initially created to make webpages feel alive
No relation to java whatsoever.....
ECMA script is the language's own specification

The programms written in js are called as scripts
they can be written directly in html files and are loaded along with the webpage

scripts are simple text files that can be written and executed without the need for additional complexities like compilation. This is the characteristic often associated with scripting languages like JavaScript, Python, or Shell scripting.

Today, JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called the JavaScript engine.

The browser has an embedded engine sometimes called a “JavaScript virtual machine”.

Different engines have different “codenames”. For example:

V8 – in Chrome, Opera and Edge.
SpiderMonkey – in Firefox.
…There are other codenames like “Chakra” for IE, “JavaScriptCore”, “Nitro” and “SquirrelFish” for Safari, etc.

                HOW DO ENGINES WORK ?

Engines are complicated. But the basics are easy.

The engine (embedded if it’s a browser) reads (“parses”) the script.
Then it converts (“compiles”) the script to machine code.
And then the machine code runs, pretty fast.
The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.


    WHAT IS IN-BROWSER JS AND WHAT CAN IT DO AND CANNOT ?

    In the context of browser-based JavaScript, the 
statement likely refers to the nature of JavaScript as an interpreted scripting language that runs directly in web browsers. 
    Here's an explanation of what it can do and some
limitations:

    What JavaScript in the Browser Can Do:

1.Manipulate HTML and CSS: JavaScript can dynamically manipulate the content and style of a webpage, allowing for interactive and dynamic user experiences.

2.Handle User Events: It can respond to user actions such as clicks, keypresses, and form submissions, enabling the creation of interactive web applications.

3.Asynchronous Operations: JavaScript supports asynchronous programming, allowing you to make network requests, fetch data, and perform other tasks without blocking the main execution thread.

4.DOM Manipulation: JavaScript can manipulate the Document Object Model (DOM) of a webpage, enabling developers to create, modify, or remove HTML elements dynamically.

5.Browser Interaction: JavaScript has APIs (Application Programming Interfaces) that allow interaction with browser features, such as the ability to manipulate the browser history, handle cookies, and store data locally.

6.AJAX and Fetch: JavaScript can make asynchronous HTTP requests, enabling the fetching of data from servers without reloading the entire page.

7.Client-Side Validation: It can perform client-side form validation, improving the user experience by providing immediate feedback on form inputs.

8.Animate Elements: JavaScript can be used to create animations and transitions on webpages.

      LIMITATIONS OF IN BROWSER JS:

1.Same-Origin Policy: Due to security reasons, JavaScript is typically subject to the Same-Origin Policy, which restricts making requests to domains different from the one that served the web page.

2.Client-Side Security: As code is executed on the client-side, it's inherently less secure than server-side code. Sensitive operations should be performed on the server to avoid potential security risks.

3.Limited File System Access: For security reasons, JavaScript in the browser has limited access to the user's file system.

4.Cross-Domain Restrictions: JavaScript running on a webpage is restricted from accessing content on other domains, unless those domains explicitly allow it through mechanisms like Cross-Origin Resource Sharing (CORS).

5.Resource Consumption: Intensive JavaScript operations can affect the performance of web pages, and poorly optimized code may cause browsers to become unresponsive.

Understanding these capabilities and limitations helps developers create effective and secure web applications using JavaScript.

              WHAT MAKES JS UNIQUE ?

Full integration with HTML/CSS.
Simple things are done simply.
Supported by all major browsers and enabled by default.


 recently a plethora of new languages appeared, which are transpiled (converted) to JavaScript before they run in the browser.

Modern tools make the transpilation very fast and transparent, actually allowing developers to code in another language and auto-converting it “under the hood”.

Examples of such languages:

CoffeeScript is “syntactic sugar” for JavaScript. It introduces shorter syntax, allowing us to write clearer and more precise code. Usually, Ruby devs like it.
TypeScript is concentrated on adding “strict data typing” to simplify the development and support of complex systems. It is developed by Microsoft.
Flow also adds data typing, but in a different way. Developed by Facebook.
Dart is a standalone language that has its own engine that runs in non-browser environments (like mobile apps), but also can be transpiled to JavaScript. Developed by Google.
Brython is a Python transpiler to JavaScript that enables the writing of applications in pure Python without JavaScript.
Kotlin is a modern, concise and safe programming language that can target the browser or Node. AND MANY MORE.........

SUMMARY

JavaScript was initially created as a browser-only language, but it is now used in many other environments as well.
Today, JavaScript has a unique position as the most widely-adopted browser language, fully integrated with HTML/CSS.
There are many languages that get “transpiled” to JavaScript and provide certain features. It is recommended to take a look at them, at least briefly, after mastering JavaScript.


